import cv2
import numpy as np

# Load the pre-trained face detection model (Haar Cascade Classifier)
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Initialize the webcam
cap = cv2.VideoCapture(0)  # Use 0 for the default camera, or provide an image file path

if not cap.isOpened():
    print("Error: Unable to access the camera.")
    exit()

# Define the lower and upper HSV color values for detecting the hand color
lower_color = np.array([0, 20, 70], dtype=np.uint8)
upper_color = np.array([20, 255, 255], dtype=np.uint8)

while True:
    # Read a frame from the webcam
    ret, frame = cap.read()

    if not ret:
        print("Error: Failed to capture frame.")
        break

    # Convert the frame to grayscale for face detection
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces in the frame
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

    # Draw rectangles around detected faces
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

    # Convert the frame to the HSV color space
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Create a mask to filter the hand color
    mask = cv2.inRange(hsv, lower_color, upper_color)

    # Find contours in the mask
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Check if any contours are found (hand detected)
    if len(contours) > 0:
        # Draw the largest contour (hand)
        max_contour = max(contours, key=cv2.contourArea)
        cv2.drawContours(frame, [max_contour], 0, (0, 255, 0), 2)

    # Display the frame with detected faces and hand gestures
    cv2.imshow('Face and Hand Detection', frame)

    # Exit the loop if 'q' key is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the webcam and close all OpenCV windows
cap.release()
cv2.destroyAllWindows()
